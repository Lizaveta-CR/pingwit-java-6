ORM. + :
• позволяет взаимодействовать с реляционной базой данных, не становясь экспертом в SQL.
• ORM позволяет разработчику использовать язык по своему выбору.
• gоскольку ORM добавляет уровень абстракции, разработчику не нужно помнить о тонких различиях между MySQL, PostgreSQL, SQLite и другими. Вместо этого они могут сосредоточиться исключительно на использовании ORM, который обеспечивает низкоуровневое взаимодействие с базой данных.
• За вас делается многое:  обработка базовых подключений к базе данных, маппинг сущностей и т.д.
- :
• если вы сравните производительность при написании "сырого" SQL или при использовании ORM, вы обнаружите, raw SQL значительно быстрее, так как нет необходимости "трансляции(маппинга)" сущностей.
• Если вы хорошо знаете язык SQL и свою СУБД по умолчанию, вы можете использовать свои знания для более быстрого выполнения запросов, но это не то же самое при использовании ORM.
• ORM не подходят, если запрос или бизнес-логика, становятся сложными. Конечно, вы можете справиться на уровне запроса. Но вы просто не знаете, как это написать в ORM. Это возможно и случается довольно часто.